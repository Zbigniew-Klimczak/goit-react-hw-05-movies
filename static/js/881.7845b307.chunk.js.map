{"version":3,"file":"static/js/881.7845b307.chunk.js","mappings":"sPACA,EAAuB,qBAAvB,EAAoD,sBAApD,EAAiF,qBAAjF,EAAiH,yB,mCC6DjH,EApDe,WACb,OAAsCA,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAwCF,EAAAA,EAAAA,UAAS,IAAjD,eAAOG,EAAP,KAAqBC,EAArB,KACA,GAAuBC,EAAAA,EAAAA,MAAhBC,GAAP,eACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OACjBC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAmB,mCAAG,yFAEP,QADbC,EAAaP,EAAaQ,IAAI,UADV,iCAGKC,EAAAA,EAAAA,IAAYF,GAHjB,OAGlBG,EAHkB,OAIxBZ,EAAgBY,EAAeC,KAAKC,SACO,IAAvCF,EAAeC,KAAKC,QAAQC,QAC9BC,IAAAA,OAAAA,KAAqB,6BANC,2CAAH,qDAUzBR,GACD,GAAE,CAACN,IACJ,IAAMe,EAAY,mCAAG,WAAMC,GAAN,iEACnBA,EAAEC,iBACFhB,EAAS,kBAAD,OAAmBN,IAFR,2CAAH,sDAIlB,OACE,iCACE,kBAAMuB,UAAWC,EAAUC,SAAUL,EAArC,WACE,kBACEG,UAAWC,EACXE,KAAK,OACLC,YAAY,oBACZC,SAAU,SAAAP,GACRpB,EAAeoB,EAAEQ,OAAOC,MAAMC,OAC/B,KAEH,mBAAQL,KAAK,SAAb,wBAEF,eAAIH,UAAWC,EAAf,SACGtB,EAAa8B,KAAI,SAAAC,GAAK,OACrB,yBACE,SAAC,KAAD,CACEV,UAAWC,EACXU,GAAE,kBAAaD,EAAME,IACrBC,MAAO,CAAEC,KAAM7B,GAHjB,cAKmB8B,IAAhBL,EAAMM,MAAsBN,EAAMO,KAAOP,EAAMM,SAN3CN,EAAME,GADM,QAc9B,C","sources":["webpack://goit-react-hw-05-movies/./src/pages/Movies/Movies.module.css?82ee","pages/Movies/Movies.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Movies_form__4ow+Z\",\"input\":\"Movies_input__KrUqs\",\"list\":\"Movies_list__hqYjd\",\"listItem\":\"Movies_listItem__YWcFi\"};","import { useState, useEffect } from 'react';\nimport Notiflix from 'notiflix';\nimport css from './Movies.module.css';\nimport {\n  Link,\n  useNavigate,\n  useLocation,\n  useSearchParams,\n} from 'react-router-dom';\nimport { fetchSearch } from 'utils/FetchFunc';\nconst Movies = () => {\n  const [searchValue, setSearchValue] = useState('');\n  const [searchMovies, setSearchMovies] = useState([]);\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n  useEffect(() => {\n    const fetchSearchedMovies = async () => {\n      const queryParam = searchParams.get('query');\n      if (queryParam !== null) {\n        const searchResponse = await fetchSearch(queryParam);\n        setSearchMovies(searchResponse.data.results);\n        if (searchResponse.data.results.length === 0) {\n          Notiflix.Notify.info('No movies with that title');\n        }\n      }\n    };\n    fetchSearchedMovies();\n  }, [searchParams]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    navigate(`/movies/?query=${searchValue}`);\n  };\n  return (\n    <>\n      <form className={css.form} onSubmit={handleSubmit}>\n        <input\n          className={css.input}\n          type=\"text\"\n          placeholder=\"Enter movie title\"\n          onChange={e => {\n            setSearchValue(e.target.value.trim());\n          }}\n        />\n        <button type=\"Submit\">Search</button>\n      </form>\n      <ul className={css.list}>\n        {searchMovies.map(movie => (\n          <li key={movie.id}>\n            <Link\n              className={css.listItem}\n              to={`/movies/${movie.id}`}\n              state={{ from: location }}\n            >\n              {movie.title === undefined ? movie.name : movie.title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\nexport default Movies;\n"],"names":["useState","searchValue","setSearchValue","searchMovies","setSearchMovies","useSearchParams","searchParams","navigate","useNavigate","location","useLocation","useEffect","fetchSearchedMovies","queryParam","get","fetchSearch","searchResponse","data","results","length","Notiflix","handleSubmit","e","preventDefault","className","css","onSubmit","type","placeholder","onChange","target","value","trim","map","movie","to","id","state","from","undefined","title","name"],"sourceRoot":""}